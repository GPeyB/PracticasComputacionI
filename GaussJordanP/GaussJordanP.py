# -*- coding: utf-8 -*-
"""GaussJordan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q03wcf2VhC53Myct7Fw-okPvtxwYAI-C
"""

#Autor: Gabriel Peytral Borja
#Fecha: 20/11/21
# Práctica GJ en Python 

# Importando librería numpy
import numpy as np
import sys

# Recibiendo número de variables
n = int(input('Insertar número de variables: '))

# Hago arreglo numpy de tamaño n por n+1 e incializo con cero
a = np.zeros((n,n+1))

# Hago arreglo numpy de tamaño n para guardar la solución 
x = np.zeros(n)

# Recibiendo coeficientes para la matriz
print('Inserte los coefcientes de su matriz:')
for i in range(n):
    for j in range(n+1):
        a[i][j] = float(input( 'Valor elemento:['+str(i)+']['+ str(j)+']='))

# Aplicando eliminación de Gauss
for i in range(n):
    if a[i][i] == 0.0:
        sys.exit('Divisón entre 0, indefinida')
        
    for j in range(n):
        if i != j:
            ratio = a[j][i]/a[i][i]

            for k in range(n+1):
                a[j][k] = a[j][k] - ratio * a[i][k]

# Sacando Solución 

for i in range(n):
    x[i] = a[i][n]/a[i][i]

# Imprimiendo solución 
print('Solución: ')
for i in range(n):
    print('X%d = %0.2f' %(i,x[i]), end = '\t')